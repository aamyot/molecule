{"name":"Molecule","tagline":"A Rack inspired web micro-framework for easy and fun Java Web Development","body":"[![Build Status](https://travis-ci.org/testinfected/molecule.png?branch=master)](https://travis-ci.org/testinfected/molecule)\r\n[![Coverage Status](https://coveralls.io/repos/testinfected/molecule/badge.png)](https://coveralls.io/r/testinfected/molecule)\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.vtence.molecule/molecule/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.vtence.molecule/molecule)\r\n[![Issues In Progress](https://badge.waffle.io/testinfected/molecule.png?label=In%20Progress&title=Started)](https://waffle.io/testinfected/molecule)\r\n\r\n## Quick Start\r\n\r\n```java\r\npublic class HelloWorld {\r\n    public static void main(String[] args) throws IOException {\r\n        WebServer server = WebServer.create();\r\n        server.start((request, response) -> response.body(\"Hello, World\"));\r\n    }\r\n}\r\n```\r\n\r\nAccess your application at:\r\n\r\n`http://localhost:8080`\r\n\r\nIf you don't use Java 8, it's almost as good:\r\n\r\n```java\r\npublic class HelloWorld {\r\n    public static void main(String[] args) throws IOException {\r\n        WebServer server = WebServer.create();\r\n        server.start(new Application() {\r\n            public void handle(Request request, Response response) throws Exception {\r\n                response.body(\"Hello, World\");\r\n            }\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n## Download \r\n\r\nYou can get the latest release version from Maven Central:\r\n\r\n```xml\r\n<dependency>\r\n      <groupId>com.vtence.molecule</groupId>\r\n      <artifactId>molecule</artifactId>\r\n      <version>0.4</version>\r\n</dependency>\r\n```\r\n \r\nIf you want the development version, grab the latest snapshot from Sonatype snapshots repositories \r\n(```https://oss.sonatype.org/content/repositories/snapshots```):\r\n\r\n```xml\r\n<dependency>\r\n      <groupId>com.vtence.molecule</groupId>\r\n      <artifactId>molecule</artifactId>\r\n      <version>0.5-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\nTo use the default web server, you also need to add [Simple](http://www.simpleframework.org) as a dependency:\r\n\r\n```xml\r\n<dependency>\r\n      <groupId>org.simpleframework</groupId>\r\n      <artifactId>simple</artifactId>\r\n      <version>5.1.6</version>\r\n</dependency>\r\n```\r\n\r\n## Want to start with some code?\r\n\r\nTry out the following examples (Java 6 language level):\r\n\r\n* [Hello World](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/helloworld/HelloWorldExample.java)\r\n* [Rendering HTML](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/simple/SimpleExample.java)\r\n* [Dynamic Routes](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/routing/RoutingExample.java)\r\n* [Static Files](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/files/StaticFilesExample.java)\r\n* [REST](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/rest/RESTExample.java)\r\n* [View Templates and Layout](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/templating/TemplatingAndLayoutExample.java)\r\n* [HTTP Sessions](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/session/SessionExample.java)\r\n* [Filters](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/filtering/FilteringExample.java)\r\n* [Creating a Custom Middleware](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/middleware/CustomMiddlewareExample.java)\r\n* [Caching and Compression](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/performance/CachingAndCompressionExample.java)\r\n* [A Sample Application](https://github.com/testinfected/simple-petstore/blob/master/webapp/src/main/java/org/testinfected/petstore/PetStore.java)\r\n\r\n## Getting Started\r\n\r\nFirst thing first, you need a server to run your app:\r\n\r\n```java\r\nWebServer server = WebServer.create();\r\n```\r\n\r\nThis will set the default web server, which is powered by [Simple](http://www.simpleframework.org), \r\nto run locally on port 8080.\r\n\r\nTo start the server, give it an app:\r\n\r\n```java\r\nserver.start((request, response) -> response.body(\"Hello, World!\"));\r\n```\r\n\r\nTo stop the server, call the _stop_ method:\r\n\r\n```java\r\nserver.stop()\r\n```\r\n\r\nYou can optionally specify the interface and port to bound to when creating the server, e.g.\r\n\r\n```java\r\nWebServer server = WebServer.create(\"0.0.0.0\", 8088);\r\n```\r\n\r\n## Routing\r\n\r\nRoutes let you route incoming requests to different applications based on the request verb and path. A route is composed\r\nof a path pattern, an optional set of verbs to match, and an application endpoint: \r\n\r\n```java\r\nserver.start(new DynamicRoutes() {{\r\n    get(\"/posts/:id\").to((request, response) -> {\r\n        // retrieve a given post\r\n    });\r\n    post(\"/posts\").to((request, response) -> {\r\n        // create a new post\r\n    }); \r\n    put(\"/posts/:id\").to((request, response) -> {\r\n        // update an existing post\r\n    });\r\n    delete(\"/posts/:id\").to((request, response) -> {\r\n        // delete a post\r\n    }); \r\n    map(\"/\").to((request, response) -> {\r\n        // show the home page\r\n    });\r\n}});\r\n```\r\n\r\nRoutes are matched in the order they are defined. If not defined route matches, the default behaviour is to \r\nrender a 404 Not Found. This behaviour is configurable by providing the default application to route to when no route is matched.\r\n\r\nRoute patterns can be matched exactly - they are said to be static - or can include named parameters,\r\n which are then accessible as regular request parameters on the request object:\r\n\r\n\r\n```java\r\n// matches \"GET /photos/18\" and \"GET /photos/25\"\r\n// request.parameter(\"id\") is either '18' or '25'\r\nget(\"/photos/:id\", (request, response) -> {\r\n    response.body(\"Photo #\" + request.parameter(\"id\"));\r\n});\r\n```\r\n\r\n## Middlewares\r\n\r\nMiddlewares are a way to enhance your application with optional building blocks, using a pipeline design. \r\n\r\nThey implement functionality you tend to need across all your applications,\r\nbut you don't want to build everytime. Things like **access logging**, **authentication**, \r\n**compression**, **static files**, **routing**, etc. \r\n\r\nBeing able to separate the processing of the request (and post-processing of the response) in different stages \r\nhas several benefits:\r\n\r\n* It separate concerns, which helps keep your design clean and application well-structured\r\n* It let you only include the functionality you need, so your server is as small and fast as possible \r\n* It let you plug in your own processing stages, to customize the behavior of your application\r\n* It let you reuse and share middlewares, as elemental building blocks of application behavior\r\n\r\nFor example you could have the following separate stages of the pipeline doing:\r\n\r\n1. Capturing internal server errors to render a nice 500 page\r\n1. Monitoring, logging accesses to the server\r\n1. Authentication and authorisation, to control access to your applicatin\r\n1. Caching, returning a cached result if request has already been processed recently\r\n1. Compression, to reduce bandwith usage\r\n1. Security, to prevent attacks such as CSRF\r\n1. Processing, to actually process the request\r\n","google":"UA-16545808-1","note":"Don't delete this file! It's used internally to help with page regeneration."}